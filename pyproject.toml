[tool.poetry]
name = "ssb-klass-python"
version = "0.0.11"
description = "A Python package built on top of KLASS's API for retrieving classifications, codes, correspondences etc."
authors = ["Carl Corneil, ssb-pythonistas <ssb-pythonistas@ssb.no>"]
license = "MIT"
readme = "README.md"
packages = [{include = "klass", from = "src"}]
classifiers = ["Development Status :: 4 - Beta"]
homepage = "https://github.com/statisticsnorway/ssb-klass-python"
repository = "https://github.com/statisticsnorway/ssb-klass-python"
documentation = "https://statisticsnorway.github.io/ssb-klass-python"

[tool.poetry.dependencies]
python = ">=3.10,<3.13"
dapla-toolbelt = ">=1.3.2"


[tool.poetry.urls]
Changelog = "https://github.com/statisticsnorway/ssb-klass-python/releases"

[tool.poetry.dependencies]
python = ">=3.10,<4.0"
dapla-toolbelt = ">=2.0.6"
python-dateutil = ">=2.8.2"
toml = ">=0.10.2"
ipywidgets = ">=8.0.6"
pandas = ">=1.5.3"
requests = ">=2.31.0"
# Stubs for Mypy
pandas-stubs = ">=2.1.1.230928"
types-requests = ">=2.31.0.10"
types-python-dateutil = ">=2.8.19.14"
types-toml = ">=0.10.8.7"

[tool.poetry.group.dev.dependencies]
pytest = ">=7.1.3"
ipykernel = ">=6.15.3"
autoflake = ">=1.7.6"
pep8-naming = ">=0.13.2"
pyupgrade = ">=3.1.0"
isort = ">=5.12.0"
flake8-logging-format = ">=0.8.1"
flake8-eradicate = ">=1.4.0"
flake8-debugger = ">=4.1.2"
flake8-comprehensions = ">=3.10.0"
flake8-builtins = ">=2.0.0"
flake8-bugbear = ">=22.9.23"
flake8 = "^5.0.4"
bump2version = ">=1.0.1"
pytest-cov = ">=5.0.0"
mypy = ">=0.982"
pyproject-flake8 = ">=5.0.4.post1"
pre-commit = ">=3.3.1"
pre-commit-hooks = ">=4.4.0"
nox = ">=2023.4.22"
nox-poetry = ">=1.0.3"
black = {extras = ["jupyter"], version = ">=24.4.2"}

[tool.pytest.ini_options]
pythonpath = ["src"]


[tool.coverage.paths]
source = ["src", "*/site-packages"]
tests = ["tests", "*/tests"]

[tool.coverage.run]
branch = true
source = ["klass", "tests"]
relative_files = true

[tool.coverage.report]
show_missing = true
fail_under = 50

[tool.mypy]
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_context = true

[[tool.mypy.overrides]]
module = [
    "ipywidgets.*",
    "argcomplete.*",
]
ignore_missing_imports = true

[tool.ruff]
force-exclude = true  # Apply excludes to pre-commit
show-fixes = true
src = ["src", "tests"]
target-version = "py310"  # Minimum Python version supported

include = ["*.py", "*.pyi", "**/pyproject.toml", "*.ipynb"]
extend-exclude = [
    "__pycache__",
    "old",
    ".ipynb_checkpoints",
    "noxfile.py",
    "docs/conf.py",
]

# Ruff rules may be customized as desired: https://docs.astral.sh/ruff/rules/
[tool.ruff.lint]
select = [
    "A",    # prevent using keywords that clobber python builtins
    "ANN",  # check type annotations
    "B",    # bugbear: security warnings
    "D",    # documentation
    "E",    # pycodestyle
    "F",    # pyflakes
    "ISC",  # implicit string concatenation
    "I",    # sort imports
    "UP",   # alert you when better syntax is available in your python version
    "RUF",  # the ruff developer's own rules
]
ignore = [
    "ANN101", # Supress missing-type-self.
    "ANN102", # Supress missing-type-cls.
    "ANN202", # Don't requiere return type annotation for private functions.
    "ANN401", # Allow type annotation with type Any.
     "D100",   # Supress undocumented-public-module. Only doc of public api required.
     "E402",   # Supress module-import-not-at-top-of-file, needed in jupyter notebooks.
     "E501",   # Supress line-too-long warnings: trust black's judgement on this one.
]

[tool.ruff.lint.isort]
force-single-line = true

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.pydocstyle]
convention = "google"  # You can also use "numpy".

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["classmethod", "validator", "root_validator", "pydantic.validator"]

[tool.ruff.lint.per-file-ignores]
"*/__init__.py" = ["F401"]
"**/tests/*" = [
    "ANN001",  # type annotations don't add value for test functions
    "ANN002",  # type annotations don't add value for test functions
    "ANN003",  # type annotations don't add value for test functions
    "ANN201",  # type annotations don't add value for test functions
    "ANN204",  # type annotations don't add value for test functions
    "ANN205",  # type annotations don't add value for test functions
    "ANN206",  # type annotations don't add value for test functions
    "D100",    # docstrings are overkill for test functions
    "D101",
    "D102",
    "D103",
    "D100",
    "S101",    # asserts are encouraged in pytest
]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
profile = "black"
force_single_line = true
skip_gitignore = true
lines_after_imports = 2
# The line below is needed for jupyter notebooks stored as .py in percent format.
# See https://github.com/PyCQA/isort/issues/1338 for details
treat_comments_as_code = ["# %%"]

[tool.jupytext]
formats = "ipynb,auto:percent"
notebook_metadata_filter = "jupytext.text_representation,-jupytext.text_representation.jupytext_version,-widgets,-varInspector"
cell_metadata_filter = "-papermill,tags"

[tool.pytest.ini_options]
pythonpath = ["src"]
testpaths = ["tests"]
